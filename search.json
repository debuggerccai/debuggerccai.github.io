[{"title":"Cordova常见问题","url":"/2018/11/02/cordova/Cordova%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/","content":"启动前黑屏创建styles.xml文件——注意：文件名固定不能变，因为是android特有文件名\nplatforms\\android\\app\\src\\main\\res\\values\\styles.xml\n&lt;resources&gt;    &lt;style name=&quot;WelcomeStyle&quot; parent=&quot;@android:style/Theme.DeviceDefault.NoActionBar&quot;&gt;        &lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/screen&lt;/item&gt;        &lt;item name=&quot;android:windowFullscreen&quot;&gt;false&lt;/item&gt;    &lt;/style&gt;    &lt;style name=&quot;Appwelcome&quot; parent=&quot;android:Theme.Translucent.NoTitleBar.Fullscreen&quot;&gt;    &lt;/style&gt;&lt;/resources&gt;\n\n\na. 创建一个主题，修改其背景为透明，或者和启动屏图片一致\nb. AndroidManifest.xml文件，把主题改为上述主题。\n\n打开config.xml，添加配置项：\n&lt;platform name=&quot;android&quot;&gt;     &lt;edit-config file=&quot;AndroidManifest.xml&quot; mode=&quot;merge&quot; target=&quot;/manifest/application/activity[@android:name=&#x27;MainActivity&#x27;]&quot;&gt;            &lt;activity android:theme=&quot;@style/WelcomeStyle&quot; /&gt;     &lt;/edit-config&gt;&lt;/platform&gt;\n\n在widget标签中添加xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n&lt;widget xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; \n\n运行ionic cordova build android，没有错误，能正常生成。此时打开platforms\\android\\app\\src\\main\\AndroidManifest.xml\n详细\n启动页结束短暂白屏在config.xml中添加配置项\n&lt;preference name=&quot;SplashScreenDelay&quot; value=&quot;10000&quot; /&gt;&lt;preference name=&quot;ShowSplashScreenSpinner&quot; value=&quot;false&quot; /&gt;&lt;preference name=&quot;SplashMaintainAspectRatio&quot; value=&quot;false&quot; /&gt;&lt;preference name=&quot;SplashShowOnlyFirstTime&quot; value=&quot;false&quot; /&gt;&lt;preference name=&quot;SplashScreenHide&quot; value=&quot;true&quot; /&gt;&lt;preference name=&quot;AutoHideSplashScreen&quot; value=&quot;false&quot; /&gt;&lt;preference name=&quot;FadeSplashScreen&quot; value=&quot;false&quot; /&gt;\n\nvue项目 main.js 添加 navigator.splashscreen.hide()\n// 延时关闭启动页, 避免短暂白屏setTimeout(() =&gt; &#123;\tnavigator.splashscreen.hide()&#125;, 1000)\n\n\n\n","tags":["cordova"]},{"title":"奇淫技巧","url":"/2017/09/06/javascript/%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/","content":"javaScript 奇淫技巧1.论如何最佳的让两个整数交换数值\n常规办法:\nvar a=1,b=2;a += b;b = a -b;a -= b;\n\nES6:\nvar a=1,b=2;[a,b] = [b,a];\n\n\n2.如何优雅的实现金钱格式化：1234567890 –&gt; 1,234,567,890\n正则魔法：\nvar test1 = &#x27;1234567890&#x27;var format = test1.replace(/\\B(?=(\\d&#123;3&#125;)+(?!\\d))/g, &#x27;,&#x27;)console.log(format) // 1,234,567,890\n\ntoLocaleString() 方法,把数组转换为本地字符串。\n(1234567890).toLocaleString(&#x27;en-US&#x27;);\n\n\n3.ES6 数组去重\n[...new Set([1,&quot;1&quot;,1,1,2,3])];\n\n\n4.用最短的代码实现一个长度为n且值都为m的数组\nArray(6).fill(8);\n\n\n5.取出一个数组中的最大值和最小值\nvar numbers = [5, 458 , 120 , -215 , 228 , 400 , 122205, -85411]; var maxInNumbers = Math.max.apply(Math, numbers); var minInNumbers = Math.min.apply(Math, numbers);\n\n\n6.论如何优雅的取随机字符串\nMath.random().toString(16).substring(2) // 13位Math.random().toString(36).substring(2) // 11位\n\n\n7.单行写一个评级组件\n&quot;★★★★★☆☆☆☆☆&quot;.slice(5 - rate, 10 - rate);定义一个变量rate是1到5的值var rate = 2; //&quot;★★☆☆☆&quot;\n","categories":["前端"],"tags":["JS"]},{"title":"hexo-Anisina 使用心得","url":"/2017/07/04/hexo/hexo-Anisina%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/","content":"写在开头1.个人博客采用hexo快速搭建，使用主题为Anisina，主题原作者编写的中文使用教程请敲这里,也可以选择其他主题\n2.本文内容主要在于通过分析layout布局模板和config配置文件，更好理解Anisina主题的使用方法\n3.对works.ejs文件做了部分修改，config.yml新增Project Info。详情\nHexo什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n安装npm install hexo-cli -g\n\n建站安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。\n$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install\n\n新建完成后，指定文件夹的目录如下：\n.├── _config.yml\t\t\t#配置文件夹├── package.json\t\t#应用程序的信息├── scaffolds\t\t\t#模板文件夹├── source\t\t\t\t#资源文件夹|   ├── _drafts|   └── _posts└── themes\t\t\t\t#主题文件夹\n\n常用命令$ hexo init [folder]\t\t\t#新建一个网站$ hexo new [layout] &lt;title&gt;\t\t#新建一篇文章$ hexo g\t\t\t\t\t\t#生成静态文件$ hexo clean\t\t\t\t\t#清空缓存$ hexo server\t\t\t\t\t#运行服务器$ hexo d\t\t\t\t\t\t#部署到git仓库\n\n\nAnisina1.安装git clone https://github.com/Haojen/hexo-theme-Anisina.gitclone`下来后将文件拷贝至`hexo init [folder]/themes\n\n2.修改1.将Anisina文件拷贝到themes文件2.themes: Anisina3.或者直接拷贝 Anisina 文件夹下的 `_config.yml` 替换 hexo 默认的 _config.yml\n\n3.配置文件_config.yml配置文件采用key: value的形式,:后面一定要带空格，否则error。可以拷贝key之后ctrl + f 查找快速修改配置信息。\n# Sitetitle:  # your blog title nameauthor:  # your nameheader-img: \t# background imagefavicon: \t# website icon# SNS settingsgithub_username: # Id of a social account# Sidebar settingssidebar-about-description: \t# your individual descriptionsidebar-avatar:     # your photo# 配置git仓库地址，配置完成后每次只需要执行 hexo d 就能将public文件push到仓库deploy:  type: git  repo: \t# The repository with you want to upload   branch: master  # 文章header-img背景图片，url采用&#x27;cdn-url&#x27; + &#x27;header-img&#x27;拼接的方式。cdn-url:  http://ot0jk0h4v.bkt.clouddn.com/ # 你的CDN地址# 博文默认图片(如果不设置这一项, 博文标题的图片默认是灰色的)post-default-img: post-default.jpg# 友链, 请务必按以下格式书写friends: [\t&#123;\t\ttitle: &quot;your friend title&quot;,\t\thref: &quot;your fiend path&quot;\t&#125;,\t&#123;\t\ttitle: &quot;your friend title 2&quot;,\t\thref: &quot;your friend path 2&quot;\t&#125;] # 页面nav配置，这里重写了nav.ejs模板menu:  Home: /  Tags: /tags  My Works: /work  # my works Project Info\t同样，重写了works.ejs模板project: [     &#123;         title: ,          subTitle: ,         data: ,         img_link: ,         tags: [],         direction: ,         link: /#    &#125;]\n\n4.创建一个 Tags 导航页面\n运行命令:hexo new page &quot;Tags&quot; , 这会在博客的 source 目录下生成一个名为 Tags 的文件夹, 里面会有一个 index.md 格式的页面,如果没有请手动创建.\n然后打开 yourblog/source 文件夹 , 找到 Tags/index.md 这个文件, 然后设置在两条的---里面, 指定一个 layout: tags值.注意 key 和 value 之间的空格\n然后运行命令,重新生成博客内容: hexo clean &amp;&amp; hexo g , 然后可以运行 hexo serve 在本地查看效果\n\n5.博文运行命令:hexo new post folder,这会在source&#x2F;_posts\n以下是博文配置\n---layout: posttitle: &quot;Hola 2016&quot;subtitle: &quot;hi, I&#x27;m haojen ma&quot;date: 2016-05-26 06:00\t# 博文创建时会自动生成author: &quot;Haojen Ma&quot;header-img: &quot;img/post-default.jpg&quot;cdn: &#x27;header-on&#x27;tags:\t- Movies\t- Lifetop: num\t#可将博文置顶，num值越大优先级越高---\n\n创建一条博文hexo new &quot;your-post-name&quot;\n\n创建一条博文的同时，也会创建一个以该博文名命名的文件夹:\n博文标题背景图片\nheader-img: “http://sometest.png“\n\n如果你没有设置的话，会默认使用 _config.yml 下 post-default-img指定的背景图像\n6.创建My Works界面运行命令:hexo new page work,这会在source目录下生成一个work文件夹\n---title: my worksdate: 2017-07-17 17:34:13layout: works---\n\n修改works.ejs模板打开themes/layout/works.ejs文件，重写class=&quot;container&quot;标签内代码\n&lt;div class=&quot;container&quot;&gt;        &lt;section class=&quot;row&quot;&gt;            &lt;div class=&quot;col-sm-10 col-sm-offset-1                        col-md-8 col-md-offset-2                      works-area&quot;&gt;                &lt;% for(var obj of config.project)&#123; %&gt;                &lt;div class=&quot;works-item&quot;&gt;                    &lt;div class=&quot;title&quot;&gt;                        &lt;h3&gt;                            &lt;%= obj.title %&gt;                        &lt;/h3&gt;                        &lt;span class=&quot;title-date text-muted&quot;&gt;                            &lt;%= obj.data %&gt;                        &lt;/span&gt;                    &lt;/div&gt;                    &lt;div class=&quot;works-item-img&quot;&gt;                        &lt;img src=&quot;&lt;%= obj.img_link %&gt;&quot;&gt;                    &lt;/div&gt;                    &lt;div class=&quot;works-content&quot;&gt;                        &lt;% if(obj.tags)&#123; %&gt;                            &lt;div class=&quot;use text-warning&quot;&gt;                                &lt;% for (var arrayVal in obj.tags )&#123; %&gt;                                &lt;span&gt;                                        &lt;%= obj.tags[arrayVal] %&gt;                                    &lt;/span&gt;                                &lt;% &#125; %&gt;                            &lt;/div&gt;                        &lt;% &#125; %&gt;　                        &lt;% if(obj.subTitle)&#123; %&gt;                            &lt;p class=&quot;subtitle&quot;&gt; &lt;%= obj.subTitle %&gt; &lt;/p&gt;                        &lt;% &#125; %&gt;                        &lt;% if(obj.direction)&#123; %&gt;                            &lt;p class=&quot;text-muted&quot;&gt; &lt;%= obj.direction %&gt; &lt;/p&gt;                        &lt;% &#125; %&gt;                    &lt;/div&gt;                    &lt;div class=&quot;footer clearfix&quot;&gt;                        &lt;a class=&quot; btn btn-default&quot; href=&quot;&lt;%= obj.link %&gt;&quot; target=&quot;_blank&quot;&gt; Open                            it&lt;/a&gt;                    &lt;/div&gt;                &lt;/div&gt;                &lt;% &#125; %&gt;            &lt;/div&gt;        &lt;/section&gt;    &lt;/div&gt;\n\n从上面的ejs模板可以看出，在浏览器渲染数据时，会先查找_config.yml文件中的key为project的数组\nexample:\nproject: [     &#123;         title: ,          subTitle: ,         data: ,         img_link: ,         tags: [],         direction: ,         link: /#     &#125;  ]\n\n7.博文置顶可能是我技术小白，没有在作者的源码中找到博文置顶的功能，遂自己参考网络资料对node_modules/hexo-generator-index/lib/generator.js进行了修改，具体可参考博文\n","tags":["hexo"]},{"title":"post博文置顶功能","url":"/2017/07/04/hexo/post%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6%E5%8A%9F%E8%83%BD/","content":"Hexo博客添加文章置顶功能换了主题以后一直很苦恼于无法管理制定文章，Hexo只提供了按发布时间的降序排列，只好参考了网上的资料修改源文件\n原理:在Hexo生成首页HTML时，将top值高的文章排在前面，达到置顶功能。\n修改Hexo文件夹下的node_modules/hexo-generator-index/lib/generator.js，在生成文章之前进行文章top值排序。\n这是修改后的generator.js,直接将代码拷贝下来覆盖源码保存就行\n代码&#x27;use strict&#x27;;var pagination = require(&#x27;hexo-pagination&#x27;);module.exports = function(locals)&#123;  var config = this.config;  var posts = locals.posts;    posts.data = posts.data.sort(function(a, b) &#123;        if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排            else return b.top - a.top; // 否则按照top值降序排        &#125;        else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）            return -1;        &#125;        else if(!a.top &amp;&amp; b.top) &#123;            return 1;        &#125;        else return b.date - a.date; // 都没定义按照文章日期降序排    &#125;);  var paginationDir = config.pagination_dir || &#x27;page&#x27;;  return pagination(&#x27;&#x27;, posts, &#123;    perPage: config.index_generator.per_page,    layout: [&#x27;index&#x27;, &#x27;archive&#x27;],    format: paginationDir + &#x27;/%d/&#x27;,    data: &#123;      __index: true    &#125;  &#125;);&#125;;\n\nexample---title: hexo-Anisina使用心得subtitle: 更新了tag置顶的方法date: 2016-07-16 18:27:47tags: Hexoheader-img: cdn: header-off\ttop: 1\t---\n","tags":["hexo"]},{"title":"vue-cli3.x config","url":"/2019/04/22/vue/vue-cli3-x%E9%85%8D%E7%BD%AE/","content":"介绍\nVue CLI 是一个基于 Vue.js 进行快速开发的完整系统，提供：\n\n通过 @vue/cli 搭建交互式的项目脚手架。\n通过 @vue/cli + @vue/cli-service-global 快速开始零配置原型开发。\n一个运行时依赖 (@vue/cli-service)，该依赖：\n可升级；\n基于 webpack 构建，并带有合理的默认配置；\n可以通过项目内的配置文件进行配置；\n可以通过插件进行扩展。\n\n\n一个丰富的官方插件集合，集成了前端生态中最好的工具。\n一套完全图形化的创建和管理 Vue.js 项目的用户界面。\n\n\n安装installnpm install -g @vue/cli# ORyarn global add @vue/cli\n\nversionvue --version\n\ncreatevue create hello-world\n\nplugins\nInstall\n\n# options [&#x27;babel&#x27;, &#x27;pwd&#x27;, &#x27;typescript&#x27;, &#x27;eslint&#x27;, ...]vue add @vue/options\n\n\nLink\nBabel\nESlint\nTypeScript\nPWA\n…\n\n\n\n配置参考\n传送门\n\nExamplemodule.exports = &#123;\tpublicPath: process.env.NODE_ENV === &#x27;production&#x27;\t    ? &#x27;/production-sub-path/&#x27;\t    : &#x27;/&#x27;,\t// 是否开启 eslint 语法检查    lintOnSave: process.env.NODE_ENV !== &#x27;production&#x27;,    // 是否使用包含运行时编译器的 Vue 构建版本  \truntimeCompiler: true,  \t// 是否需要 source map, 关闭以加速生产环境构建  \tproductionSourceMap: false,  \t// 完整选项查看 https://webpack.js.org/configuration/dev-server/  \tdevServer: &#123;  \t\thost: &#x27;0.0.0.0&#x27;,  \t\thotOnly: true,  \t\topen: true,  \t\t// 完整选项查看 https://github.com/chimurai/http-proxy-middleware#proxycontext-config  \t\tproxy: &#123;  \t\t\t&#x27;/api&#x27;: &#123;\t\t        target: &#x27;http://127.0.0.1&#x27;,\t\t        // ws: true,\t\t        // changeOrigin: true\t\t      &#125;,  \t\t&#125;  \t&#125;,  \tcss: &#123;  \t\tmodules: false,  \t\t// 是否将组件中的 CSS 提取至一个独立的 CSS 文件中, 默认生产环境开启, 开发环境关闭  \t\textract: process.env.NODE_ENV === &#x27;production&#x27;,  \t\t// 是否为 CSS 开启 source map。设置为 true 之后可能会影响构建的性能  \t\tsourceMap: false,  \t\t// 向 CSS 相关的 loader 传递选项  \t\tloaderOptions: &#123;  \t\t\t// // 给 less-loader 传递选项  \t\t\tless: &#123;  \t\t\t\t// @/ 是 src/ 的别名        \t\t// 所以这里假设你有 `src/variables.scss` 这个文件  \t\t\t\tdata: `@import &quot;~@/assets.less&quot;;`  \t\t\t&#125;  \t\t&#125;  \t&#125;,    pages: &#123;\t    index: &#123;\t      // page 的入口\t      entry: &#x27;src/main.js&#x27;,\t      // 模板来源\t      template: &#x27;public/index.html&#x27;,\t      // 在 dist/index.html 的输出\t      filename: &#x27;index.html&#x27;,\t      // 当使用 title 选项时，\t      // template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;\t      title: &#x27;Index Page&#x27;,\t      // 在这个页面中包含的块，默认情况下会包含\t      // 提取出来的通用 chunk 和 vendor chunk。\t      chunks: [&#x27;chunk-vendors&#x27;, &#x27;chunk-common&#x27;, &#x27;index&#x27;]\t    &#125;,\t    // 当使用只有入口的字符串格式时，\t    // 模板会被推导为 `public/subpage.html`\t    // 并且如果找不到的话，就回退到 `public/index.html`。\t    // 输出文件名会被推导为 `subpage.html`。\t    // subpage: &#x27;src/main.js&#x27;  \t&#125;&#125;\n\n","categories":["前端"],"tags":["Vue"]},{"title":"npm 包发布流程","url":"/2023/03/10/npm/npm%E5%8C%85%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B/","content":"创建你的 npm 账号在发布一个npm包之前，需要准备一个属于你的npm账号。注册地址\n创建 npm 包创建你的包文件夹一个简单的npm包文件夹，应该包含以下部分：\n├── README.md├── lib│   └── index.js└── package.json\n\n关于package.jsonpackage.json是一个npm包中的重要文件，有了package.json文件才能将你的包发布到 npm注册表。你可以将package.json文件添加到你的包中，以方便其他人管理和安装。\n通过以下命令创建package.json：\nnpm init\n\n以下为package.json中包含的一些常见属性：\n&#123;  &quot;name&quot;: &quot;my_package&quot;, \t\t// 包名称  &quot;description&quot;: &quot;&quot;, \t\t\t// 关于包的描述信息，如果包目录中包含 README.md，将已 README 为准  &quot;version&quot;: &quot;1.0.0&quot;, \t\t\t// 版本号  &quot;main&quot;: &quot;lib/index.js&quot;, \t    // 项目入口文件  &quot;files&quot;: [&quot;lib&quot;],\t\t\t\t// 项目中要发布的文件列表  &quot;scripts&quot;: &#123;    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;   &#125;,\t\t\t\t\t\t    // 可执行的脚本命令  &quot;repository&quot;: &#123;    &quot;type&quot;: &quot;git&quot;,    &quot;url&quot;: &quot;https://github.com/monatheoctocat/my_package.git&quot;  &#125;, \t\t\t\t\t\t    // 仓库信息  &quot;keywords&quot;: [],\t\t\t\t// 关键字  &quot;author&quot;: &quot;&quot;,\t\t\t\t\t// 作者  &quot;license&quot;: &quot;ISC&quot;,\t\t\t    // 许可证  &quot;bugs&quot;: &#123;    &quot;url&quot;: &quot;https://github.com/monatheoctocat/my_package/issues&quot;  &#125;,\t\t\t\t\t\t\t// 项目的 bug 报告地址  &quot;homepage&quot;: &quot;https://github.com/monatheoctocat/my_package&quot;, // 项目的主页地址&#125;\n\n关于README.md在项目的根目录下创建README.md作为npm包的自述文件，可以帮助其他人在 npm上找到你的包并在他们的项目中使用你的代码获得良好的体验。该文件可能包含安装、配置和使用包中代码的说明，以及用户可能认为有帮助的任何其他信息。\n你可以创建 README.md 文件并将其添加到包中：\n\n在文本编辑器中，在您的包根目录中，创建一个名为 README.md 的文件\n在该README.md文件中，添加有关您的包的有用信息。\n保存README.md文件。\n\n本地调试将npm包发布到线上进行调试过于繁琐，并且仅为了调试代码而频繁地发布会导致版本号膨胀。所以在正式发布npm包之前，最好在本地进行调试。\n你可以使用 npm link将你的包链接到全局node_modules目录下，之后在将包链接到具体的代码目录下。\n例如：\ncd ~/projects/node-redis    # go into the package directorynpm link                    # creates global linkcd ~/projects/node-bloggy   # go into some other package directory.npm link redis              # link-install the package\n\n要解除项目与包的链接，只需要执行以下命令：\nnpm unlink redis\n\n发布 npm 包登录 npm 账号\n在登录你的 npm 账号前，请确保切换到官方镜像源：\n\nnpm config set registry https://registry.npmjs.org/\n\n\n登录你的 npm 账号：\n\nnpm login\n\n\n提示你输入用户名，密码和邮箱地址：\n\nnpm notice Log in on https://registry.npmjs.org/Username: yournamePassword: *****Email: (this IS public) youremail\n\n执行发布命令npm publish\n\n更新 npm 包版本当你对已发布的包进行重大更改时，应该更新版本号，以便将更改的范围传达给依赖你代码的其他人。\n你可以使用以下命令更改package.json中的版本号：\nnpm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]\n\n部分不同选项的作用：\n\npatch： 1.0.0 –&gt; 1.0.1\nminor：1.0.0 –&gt; 1.1.0\nmajor:   1.0.0 –&gt; 2.0.0\n\n更多选项或参数可参考npm version\n取消发布包使用官网\n在 npm 的“登录”页面上，输入您的帐户详细信息并单击“登录”。\n\n\n导航到您要取消发布的包的包页面，替换&lt;your-package-name&gt;为您的包的名称： https://www.npmjs.com/package/&lt;your-package-name&gt;\n\n单击设置。\n\n\n在“删除包”下，单击删除包。\n\n\n如果您确定要继续，请输入您的包名称并单击删除包。\n\n\n使用命令行要取消发布整个包，请运行以下命令，替换&lt;package-name&gt;为您的包的名称：\nnpm unpublish &lt;package-name&gt; -f\n\n更多操错可参考https://docs.npmjs.com/unpublishing-packages-from-the-registry\nFAQ登录失败设置官方镜像源，使用npm login登录的时候记得切换成官方镜像源地址：\nnpm config set registry https://registry.npmjs.org/\n\n设置淘宝镜像源：\nnpm config set registry https://registry.npmmirror.com/\n\n查看当前镜像源：\nnpm config get registry\n\n包名被占用这是一个常见问题，因为很多人都发包到 npm 上。有时候很难得到你想要的包名。\n为了解决这个问题，npm 允许发包到一个命名空间下。这意味着可以把包发布到你自己的用户名或者组织名下，因此解决了命名问题。\n要发包到一个命名空间下，你需要选择如下其中一种方式：\n\n手动修改 package.json 中的 name 属性值为 @username&#x2F;package-name 格式\n运行 npm init –scope&#x3D;username 而非 npm init\n\n如果你的仓库有命名空间，你需要微调一下 publish 命令：\nnpm publish --access public\n\n","categories":["前端"],"tags":["npm"]}]